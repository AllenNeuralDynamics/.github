name: Build and Release EXE (UV and pyInstaller)

on:
  workflow_call:
    inputs: 
      runner-label: 
        description: 'Runner to use'
        type: string
        default: 'eng-tools'
      project-name: 
        description: 'Project name (used to make eng-tools/release directory)'
        type: string
      project-version: 
        description: 'Project version (used to make eng-tools/release subdirectory)'
        type: string
      tag-name: 
        description: 'Tag to upload files to (defaults to latest)'
        type: string
      zip-name:
        description: 'Name of zip file'
        type: string
      exe-name:
        description: 'Name of executable'
        type: string
env: 
  PROJECT_NAME: ${{ inputs.project-name }}
  PROJECT_VERSION: ${{ inputs.project-version }}
  EXE_NAME: ${{ inputs.exe-name }}
  ZIP_NAME: ${{ inputs.zip-name }} 
  TAG_NAME: ${{ inputs.tag-name }}

jobs:
  get_defaults: 
    if: |
      ${{ inputs.project-name }} == '' || 
      ${{ inputs.project-version }} == '' || 
      ${{ inputs.tag-name }} == '' ||
      ${{ inputs.zip-name }} == '' || 
      ${{ inputs.exe-name }} == ''
    runs-on: 'ubuntu-latest'
    outputs:
      project-name: ${{ env.PROJECT_NAME }}
      project-version: ${{ env.PROJECT_VERSION }}
      zip-name: ${{ env.ZIP_NAME }}
      exe-name: ${{ env.EXE_NAME }}
      tag-name: ${{ env.TAG_NAME }}
    steps:
      ################################################################################
      #
      #   GET DEFAULTS:
      #     Get project_name and project_version from pyproject.toml
      #
      ################################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run extract_info 
        # TODO: update to main after testing...
        uses: AllenNeuralDynamics/.github/.github/actions/extract_info@dev
        id: extract_info

      ################################################################################
      #
      #   SET DEFAULTS
      #     If no input, use project-name or project-version as default
      #
      ################################################################################
      - name: Set EXE_NAME from extract_info (if not already set)
        id: set_exe_name
        shell: bash
        run: |
          EXE_NAME="${EXE_NAME:-${{ steps.extract_info.outputs.project-name }}}"
          echo "EXE_NAME=$EXE_NAME" >> "$GITHUB_ENV"
      - name: Set ZIP_NAME from EXE_NAME (if not already set)
        id: set_zip_name
        shell: bash
        run: |
          ZIP_NAME="${ZIP_NAME:-${{ env.EXE_NAME }}}"
          echo "ZIP_NAME=$ZIP_NAME" >> "$GITHUB_ENV"
      - name: Set PROJECT_NAME from extract_info (if not already set)
        id: set_project_name
        shell: bash
        run: |
          PROJECT_NAME="${PROJECT_NAME:-${{ steps.extract_info.outputs.project-name }}}"
          echo "PROJECT_NAME=$PROJECT_NAME" >> "$GITHUB_ENV"
      - name: Set PROJECT_VERSION from extract_info (if not already set)
        id: set_project_version
        shell: bash
        run: |
          PROJECT_VERSION="${PROJECT_VERSION:-${{ steps.extract_info.outputs.project-version }}}"
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> "$GITHUB_ENV"
      - name: Set TAG_NAME from extract_info (if not already set)
        id: set_tag_name
        shell: bash
        run: |
          TAG_NAME="${TAG_NAME:-v${{ steps.extract_info.outputs.project-version }}}"
          echo "TAG_NAME=$TAG_NAME" >> "$GITHUB_ENV"

  build: 
    runs-on: ${{ inputs.runner-label }}
    needs: get_defaults
    outputs:
      project-name: ${{ needs.get_defaults.outputs.project-name }}
      project-version: ${{ needs.get_defaults.outputs.project-version }}
      zip-name: ${{ needs.get_defaults.outputs.zip-name }}
      exe-name: ${{ needs.get_defaults.outputs.exe-name }}
      tag-name: ${{ needs.get_defaults.outputs.tag-name }}
    env: 
      UV_PYTHON_INSTALL_DIR: C:\ProgramData\AIBS_MPE\uv_python
      UV_TOOL_DIR: C:\ProgramData\AIBS_MPE\uv_python
    steps:
      ################################################################################
      #
      #   CLEAN ANY PREVIOUS BUILDS
      #
      ################################################################################
      - name: Clean before build (Windows)
        if: runner.os == 'Windows'
        run: |
          Remove-Item -Recurse -Force build,dist,__pycache__,${{ needs.get_defaults.outputs.zip-name }}.zip -ErrorAction SilentlyContinue
      - name: Clean before build (Linux/MacOS)
        if: runner.os != 'Windows'
        run: |
          rm -rf build dist __pycache__ *.spec ${{ needs.get_defaults.outputs.zip-name }}.zip

      ################################################################################
      #
      #   INSTALL DEPENDENCIES AND BUILD PROJECT (UV, PYINSTALLER)
      #
      ################################################################################
      - name: Install UV 
        uses: astral-sh/setup-uv@v5
      - name: Sync dependencies
        run: uv sync
      - name: Install PyInstaller
        run: uv add pyinstaller
      - name: Build project with PyInstaller
        run: uv run pyinstaller --name ${{ needs.get_defaults.outputs.exe-name }} src/jessy-test/main.py # replace this with the path to your script

      ################################################################################
      #
      #   CREATE ZIP FILE
      #
      ################################################################################
      - name: Create zip (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: Compress-Archive -Path dist/* -DestinationPath "${{ needs.get_defaults.outputs.zip-name }}.zip"
      - name: Create zip (Linux/macOS)
        if: runner.os != 'Windows'
        run: zip -r "${{ env.ZIP_NAME }}.zip" dist/

  publish: 
    runs-on: ${{ inputs.runner-label }}
    needs: build
    outputs:
      project-name: ${{ needs.build.outputs.project-name }}
      project-version: ${{ needs.build.outputs.project-version }}
      zip-name: ${{ needs.build.outputs.zip-name }}
      exe-name: ${{ needs.build.outputs.exe-name }}
      tag-name: ${{ needs.build.outputs.tag-name }}
    steps: 
      ################################################################################
      #
      #   Create Github Release
      #
      ################################################################################
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ needs.build.outputs.zip-name }}.zip
          tag_name: ${{ needs.build.outputs.tag-name }} 
          body: "Automated release of ${{ needs.build.outputs.project-name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  call-api:
    runs-on: ${{ inputs.runner-label }}
    needs: publish
    steps: 
      ################################################################################
      #
      #   Release to eng-tools/release
      #   Go to http://eng-tools/gh-pull-agent/docs for more information on API
      #
      ################################################################################
      - name: Trigger gh-pull-agent to pull latest release from this repo to eng-tools
        shell: bash
        run: |
          project_name = '${{ needs.publish.outputs.project-name }}'
          project_version = '${{ needs.publish.outputs.project-version }}'
          owner_name = '"${{ github.repository_owner }}"'
          repo_name = '"${{ github.event.repository.name }}"'
          $json = @{
            '"owner_name"' = $owner_name
            '"repo_name"' = $repo_name
          } | ConvertTo-Json -Compress
          & curl.exe -X PUT "http://eng-tools/gh-pull-agent/api/v1beta/releases/$project_name/$project_version" `
            -H "accept: application/json" `
            -H "Content-Type: application/json" `
            -d $json