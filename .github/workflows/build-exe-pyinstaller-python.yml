name: Build and Create exe Release

on:
  workflow_call:
    inputs: 
      runner_label: 
        description: 'Runner to use'
        type: string
        default: 'eng-tools'
      zip-name:
        description: 'Name of zip file'
        type: string
      exe-name:
        description: 'Name of executable'
        type: string
    outputs:
      zip-name: 
        description: 'Name of zip archive created'
        value: ${{ jobs.build.outputs.zip-name }}

env: 
  EXE_NAME: ${{ inputs.exe-name }}      # if not set, it will be extracted from setup.py or pyproject.toml
  ZIP_NAME: ${{ inputs.zip-name }}      # if not set, it will be extracted from EXE_NAME

jobs:
  build: 
    runs-on: ${{ inputs.runner_label }}
    outputs:
      zip-name: ${{ steps.export.outputs.zip-name }}
    env: 
      UV_PYTHON_INSTALL_DIR: C:\ProgramData\AIBS_MPE\uv_python
      UV_TOOL_DIR: C:\ProgramData\AIBS_MPE\uv_python
    steps:
      ################################################################################
      #
      #   SET PROJECT NAME AND ZIP NAME IF NOT PROVIDED
      #
      ################################################################################
      - name: Run extract_info only if EXE_NAME is not set
        # TODO: update to main after testing...
        uses: AllenNeuralDynamics/.github/.github/actions/extract_info@dev
        id: extract_info
        if: env.EXE_NAME == '' 
      - name: Set EXE_NAME from extract_info (if not already set)
        id: set_project_name
        shell: bash
        run: |
          EXE_NAME="${EXE_NAME:-${{ steps.extract_info.outputs.project-name }}}"
          echo "EXE_NAME=$EXE_NAME" >> "$GITHUB_ENV"
      - name: Set ZIP_NAME from EXE_NAME (if not already set)
        id: set_zip_name
        shell: bash
        run: |
          ZIP_NAME="${ZIP_NAME:-${{ env.EXE_NAME }}}"
          echo "ZIP_NAME=$ZIP_NAME" >> "$GITHUB_ENV"

      ################################################################################
      #
      #   CLEAN ANY PREVIOUS BUILDS
      #
      ################################################################################
      - name: Clean before build (Windows)
        if: runner.os == 'Windows'
        run: |
          Remove-Item -Recurse -Force build,dist,__pycache__,${{ env.ZIP_NAME }}.zip -ErrorAction SilentlyContinue
      - name: Clean before build (Linux/MacOS)
        if: runner.os != 'Windows'
        run: |
          rm -rf build dist __pycache__ *.spec ${{ env.ZIP_NAME }}.zip

      ################################################################################
      #
      #   INSTALL DEPENDENCIES AND BUILD PROJECT (UV, PYINSTALLER)
      #
      ################################################################################
      - name: Install UV 
        uses: astral-sh/setup-uv@v5
      - name: Sync dependencies
        run: uv sync
      - name: Install PyInstaller
        run: uv add pyinstaller
      - name: Build project with PyInstaller
        run: uv run pyinstaller --name ${{ env.EXE_NAME }} src/jessy-test/main.py # replace this with the path to your script

      ################################################################################
      #
      #   CREATE ZIP FILE
      #
      ################################################################################
      - name: Create zip (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: Compress-Archive -Path dist/* -DestinationPath "${{ env.ZIP_NAME }}.zip"
      - name: Create zip (Linux/macOS)
        if: runner.os != 'Windows'
        run: zip -r "${{ env.ZIP_NAME }}.zip" dist/
      - name: Export ZIP_NAME as output
        id: export
        shell: bash
        run: echo "zip-name=${{ env.ZIP_NAME }}" >> $GITHUB_OUTPUT
